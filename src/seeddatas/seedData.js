// ============================================
// FILE: src/seedData.js
// Ch·∫°y file n√†y 1 l·∫ßn ƒë·ªÉ import d·ªØ li·ªáu m·∫´u v√†o Firebase
// ============================================

import { collection, addDoc, writeBatch, doc } from 'firebase/firestore';
import { db } from './services/firebase-config';

// ===== D·ªÆ LI·ªÜU M·∫™U =====

// 1. Rule Groups
const ruleGroups = [
  {
    id: 'group_distance',
    name: 'Kho·∫£ng c√°ch',
    nameEn: 'Distance',
    description: 'C√°c rules li√™n quan ƒë·∫øn kho·∫£ng c√°ch ch·∫°y',
    icon: 'üèÉ',
    color: '#3B82F6',
    order: 1,
    isActive: true
  },
  {
    id: 'group_pace',
    name: 'T·ªëc ƒë·ªô/Pace',
    nameEn: 'Pace',
    description: 'C√°c rules li√™n quan ƒë·∫øn t·ªëc ƒë·ªô ch·∫°y',
    icon: '‚ö°',
    color: '#10B981',
    order: 2,
    isActive: true
  },
  {
    id: 'group_elevation',
    name: 'ƒê·ªô cao',
    nameEn: 'Elevation',
    description: 'C√°c rules li√™n quan ƒë·∫øn ƒë·ªô cao',
    icon: '‚õ∞Ô∏è',
    color: '#F59E0B',
    order: 3,
    isActive: true
  },
  {
    id: 'group_frequency',
    name: 'T·∫ßn su·∫•t',
    nameEn: 'Frequency',
    description: 'C√°c rules li√™n quan ƒë·∫øn t·∫ßn su·∫•t ch·∫°y',
    icon: 'üìä',
    color: '#8B5CF6',
    order: 4,
    isActive: true
  },
  {
    id: 'group_special',
    name: 'ƒê·∫∑c bi·ªát',
    nameEn: 'Special',
    description: 'C√°c rules ƒë·∫∑c bi·ªát',
    icon: '‚≠ê',
    color: '#EC4899',
    order: 5,
    isActive: true
  }
];

// 2. Rules
const rules = [
  // Distance rules
  {
    id: 'rule_min_distance_5km',
    name: 'T·ªëi thi·ªÉu 5km m·ªói l·∫ßn',
    nameEn: 'Minimum 5km per run',
    description: 'M·ªói ho·∫°t ƒë·ªông ph·∫£i c√≥ kho·∫£ng c√°ch t·ªëi thi·ªÉu 5km',
    groupId: 'group_distance',
    config: {
      type: 'distance',
      field: 'distance',
      operator: '>=',
      value: 5,
      unit: 'km'
    },
    display: {
      label: 'Kho·∫£ng c√°ch t·ªëi thi·ªÉu',
      placeholder: 'Nh·∫≠p kho·∫£ng c√°ch (km)',
      inputType: 'number',
      icon: 'üìè',
      allowCustomValue: true
    },
    defaults: {
      isRequired: true,
      points: 10,
      weight: 1.0
    },
    validation: {
      minValue: 0,
      maxValue: 100,
      step: 0.1
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  {
    id: 'rule_distance_range',
    name: 'Kho·∫£ng c√°ch 5-42km',
    nameEn: 'Distance between 5-42km',
    description: 'M·ªói ho·∫°t ƒë·ªông ph·∫£i n·∫±m trong kho·∫£ng 5-42km',
    groupId: 'group_distance',
    config: {
      type: 'distance',
      field: 'distance',
      operator: 'between',
      value: { min: 5, max: 42 },
      unit: 'km'
    },
    display: {
      label: 'Kho·∫£ng c√°ch t·ª´-ƒë·∫øn',
      placeholder: 'Nh·∫≠p kho·∫£ng (km)',
      inputType: 'range',
      icon: 'üìè',
      allowCustomValue: true
    },
    defaults: {
      isRequired: false,
      points: 15,
      weight: 1.2
    },
    validation: {
      minValue: 0,
      maxValue: 100,
      step: 0.1
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  {
    id: 'rule_total_distance',
    name: 'T·ªïng kho·∫£ng c√°ch t·ªëi thi·ªÉu',
    nameEn: 'Minimum total distance',
    description: 'T·ªïng kho·∫£ng c√°ch trong s·ª± ki·ªán ph·∫£i ƒë·∫°t t·ªëi thi·ªÉu',
    groupId: 'group_distance',
    config: {
      type: 'total_distance',
      field: 'distance',
      operator: '>=',
      value: 100,
      unit: 'km',
      aggregate: 'sum'
    },
    display: {
      label: 'T·ªïng km t·ªëi thi·ªÉu',
      placeholder: 'Nh·∫≠p t·ªïng km',
      inputType: 'number',
      icon: 'üéØ',
      allowCustomValue: true
    },
    defaults: {
      isRequired: true,
      points: 50,
      weight: 2.0
    },
    validation: {
      minValue: 10,
      maxValue: 1000,
      step: 5
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  
  // Pace rules
  {
    id: 'rule_max_pace',
    name: 'Pace kh√¥ng qu√° 7:00/km',
    nameEn: 'Max pace 7:00/km',
    description: 'Pace trung b√¨nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 7:00/km',
    groupId: 'group_pace',
    config: {
      type: 'pace',
      field: 'pace.average',
      operator: '<=',
      value: 420,
      unit: 's/km'
    },
    display: {
      label: 'Pace t·ªëi ƒëa',
      placeholder: 'VD: 420 (7:00/km)',
      inputType: 'number',
      icon: '‚ö°',
      allowCustomValue: true
    },
    defaults: {
      isRequired: false,
      points: 10,
      weight: 1.0
    },
    validation: {
      minValue: 180,
      maxValue: 600,
      step: 5
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  
  // Elevation rules
  {
    id: 'rule_min_elevation',
    name: 'ƒê·ªô cao t·ªëi thi·ªÉu 100m',
    nameEn: 'Minimum elevation 100m',
    description: 'M·ªói ho·∫°t ƒë·ªông ph·∫£i c√≥ ƒë·ªô cao t·ªëi thi·ªÉu 100m',
    groupId: 'group_elevation',
    config: {
      type: 'elevation',
      field: 'elevation.total',
      operator: '>=',
      value: 100,
      unit: 'm'
    },
    display: {
      label: 'ƒê·ªô cao t·ªëi thi·ªÉu',
      placeholder: 'Nh·∫≠p ƒë·ªô cao (m)',
      inputType: 'number',
      icon: '‚õ∞Ô∏è',
      allowCustomValue: true
    },
    defaults: {
      isRequired: false,
      points: 15,
      weight: 1.5
    },
    validation: {
      minValue: 0,
      maxValue: 5000,
      step: 10
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  
  // Frequency rules
  {
    id: 'rule_min_activities',
    name: 'T·ªëi thi·ªÉu 10 l·∫ßn ch·∫°y',
    nameEn: 'Minimum 10 activities',
    description: 'Ph·∫£i ho√†n th√†nh t·ªëi thi·ªÉu 10 ho·∫°t ƒë·ªông',
    groupId: 'group_frequency',
    config: {
      type: 'activity_count',
      field: 'count',
      operator: '>=',
      value: 10,
      unit: 'l·∫ßn'
    },
    display: {
      label: 'S·ªë l·∫ßn ch·∫°y t·ªëi thi·ªÉu',
      placeholder: 'Nh·∫≠p s·ªë l·∫ßn',
      inputType: 'number',
      icon: 'üî¢',
      allowCustomValue: true
    },
    defaults: {
      isRequired: true,
      points: 20,
      weight: 1.0
    },
    validation: {
      minValue: 1,
      maxValue: 100,
      step: 1
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  
  // Special rules
  {
    id: 'rule_morning_run',
    name: 'Ch·∫°y bu·ªïi s√°ng (5h-7h)',
    nameEn: 'Morning run (5am-7am)',
    description: 'Ho·∫°t ƒë·ªông ph·∫£i di·ªÖn ra trong kho·∫£ng 5h-7h s√°ng',
    groupId: 'group_special',
    config: {
      type: 'time_of_day',
      field: 'startDateTime',
      operator: 'between',
      value: { start: '05:00', end: '07:00' },
      unit: 'time'
    },
    display: {
      label: 'Khung gi·ªù ch·∫°y',
      placeholder: 'Ch·ªçn gi·ªù',
      inputType: 'time',
      icon: 'üåÖ',
      allowCustomValue: true
    },
    defaults: {
      isRequired: false,
      points: 5,
      weight: 0.5
    },
    validation: {
      minValue: null,
      maxValue: null,
      step: null
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  },
  {
    id: 'rule_streak',
    name: 'Ch·∫°y li√™n t·ª•c 7 ng√†y',
    nameEn: 'Run streak 7 days',
    description: 'Ch·∫°y li√™n t·ª•c √≠t nh·∫•t 7 ng√†y kh√¥ng ngh·ªâ',
    groupId: 'group_special',
    config: {
      type: 'streak',
      field: 'consecutive_days',
      operator: '>=',
      value: 7,
      unit: 'ng√†y'
    },
    display: {
      label: 'S·ªë ng√†y ch·∫°y li√™n t·ª•c',
      placeholder: 'Nh·∫≠p s·ªë ng√†y',
      inputType: 'number',
      icon: 'üî•',
      allowCustomValue: true
    },
    defaults: {
      isRequired: false,
      points: 30,
      weight: 2.0
    },
    validation: {
      minValue: 2,
      maxValue: 365,
      step: 1
    },
    stats: {
      usageCount: 0,
      popularityScore: 0
    },
    isActive: true,
    isSystem: true
  }
];

// 3. Events m·∫´u
const events = [
  {
    name: 'CHALLENGE "CH·∫†Y ƒê√ìN T·∫æT" 2025',
    description: 'N·ªëi ti·∫øp th√†nh c√¥ng c·ªßa c√°c challenge tr∆∞·ªõc, ch√∫ng ta ti·∫øp t·ª•c v·ªõi th·ª≠ th√°ch ch·∫°y ƒë√≥n T·∫øt Nguy√™n ƒê√°n 2025. H√£y c√πng nhau t√≠ch l≈©y km ƒë·ªÉ ƒë√≥n m·ªôt nƒÉm m·ªõi tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng!',
    media: {
      coverImage: 'https://images.unsplash.com/photo-1552674605-db6ffd4facb5?w=800',
      thumbnail: 'https://images.unsplash.com/photo-1552674605-db6ffd4facb5?w=400',
      gallery: []
    },
    startDate: '2025-01-06',
    endDate: '2025-02-02',
    timezone: 'Asia/Ho_Chi_Minh',
    registration: {
      isOpen: true,
      maxParticipants: null,
      currentParticipants: 0,
      registrationDeadline: '2025-01-05'
    },
    scoring: {
      enabled: true,
      method: 'points'
    },
    status: 'active'
  },
  {
    name: 'The Last Man Standing 2024 - M√ôA BA',
    description: 'TLMS l√† m·ªôt trong s·ªë c√°c s·ª± ki·ªán n·ªïi b·∫≠t do CLB H√≤a Kh√°nh Runners t·ªï ch·ª©c. Th·ª≠ th√°ch v·ªÅ s·ª©c b·ªÅn v√† √Ω ch√≠ v·ªõi format ƒë·ªôc ƒë√°o.',
    media: {
      coverImage: 'https://images.unsplash.com/photo-1530549387789-4c1017266635?w=800',
      thumbnail: 'https://images.unsplash.com/photo-1530549387789-4c1017266635?w=400',
      gallery: []
    },
    startDate: '2024-11-01',
    endDate: '2024-11-24',
    timezone: 'Asia/Ho_Chi_Minh',
    registration: {
      isOpen: false,
      maxParticipants: 100,
      currentParticipants: 89,
      registrationDeadline: '2024-10-31'
    },
    scoring: {
      enabled: true,
      method: 'distance'
    },
    status: 'completed'
  }
];

// ===== FUNCTIONS IMPORT =====

export const seedRuleGroups = async () => {
  console.log('üå± ƒêang import Rule Groups...');
  
  try {
    const batch = writeBatch(db);
    
    ruleGroups.forEach((group) => {
      const docRef = doc(db, 'ruleGroups', group.id);
      batch.set(docRef, {
        ...group,
        createdAt: new Date(),
        updatedAt: new Date()
      });
    });
    
    await batch.commit();
    console.log(`‚úÖ Import th√†nh c√¥ng ${ruleGroups.length} rule groups`);
    return { success: true, count: ruleGroups.length };
  } catch (error) {
    console.error('‚ùå L·ªói import rule groups:', error);
    return { success: false, error: error.message };
  }
};

export const seedRules = async () => {
  console.log('üå± ƒêang import Rules...');
  
  try {
    const batch = writeBatch(db);
    
    rules.forEach((rule) => {
      const docRef = doc(db, 'rules', rule.id);
      batch.set(docRef, {
        ...rule,
        createdAt: new Date(),
        updatedAt: new Date()
      });
    });
    
    await batch.commit();
    console.log(`‚úÖ Import th√†nh c√¥ng ${rules.length} rules`);
    return { success: true, count: rules.length };
  } catch (error) {
    console.error('‚ùå L·ªói import rules:', error);
    return { success: false, error: error.message };
  }
};

export const seedEvents = async () => {
  console.log('üå± ƒêang import Events...');
  
  try {
    let count = 0;
    
    for (const event of events) {
      await addDoc(collection(db, 'events'), {
        ...event,
        createdBy: 'admin',
        createdAt: new Date(),
        updatedAt: new Date()
      });
      count++;
    }
    
    console.log(`‚úÖ Import th√†nh c√¥ng ${count} events`);
    return { success: true, count: count };
  } catch (error) {
    console.error('‚ùå L·ªói import events:', error);
    return { success: false, error: error.message };
  }
};

// H√†m ch·∫°y t·∫•t c·∫£
export const seedAll = async () => {
  console.log('üöÄ B·∫ÆT ƒê·∫¶U IMPORT D·ªÆ LI·ªÜU M·∫™U...\n');
  
  const results = {
    ruleGroups: await seedRuleGroups(),
    rules: await seedRules(),
    events: await seedEvents()
  };
  
  console.log('\nüìä K·∫æT QU·∫¢:');
  console.log('Rule Groups:', results.ruleGroups);
  console.log('Rules:', results.rules);
  console.log('Events:', results.events);
  
  const allSuccess = Object.values(results).every(r => r.success);
  
  if (allSuccess) {
    console.log('\nüéâ HO√ÄN TH√ÄNH! T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c import th√†nh c√¥ng.');
  } else {
    console.log('\n‚ö†Ô∏è C√ì M·ªòT S·ªê L·ªñI. Vui l√≤ng ki·ªÉm tra logs ·ªü tr√™n.');
  }
  
  return results;
};