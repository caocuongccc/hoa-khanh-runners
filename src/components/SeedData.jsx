// FILE: src/components/Admin/SeedDataPage.jsx
// Trang ƒë·ªÉ import d·ªØ li·ªáu m·∫´u v√†o Firebase

import React, { useState } from 'react';
import { Database, CheckCircle, XCircle, Loader, AlertCircle } from 'lucide-react';
import { collection, doc, writeBatch, Timestamp } from 'firebase/firestore';
import { db } from '../services/firebase';

const SeedDataPage = () => {
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [step, setStep] = useState(1);

  // D·ªØ li·ªáu m·∫´u
  const ruleGroups = [
    {
      id: 'group_distance',
      name: 'Kho·∫£ng c√°ch',
      nameEn: 'Distance',
      description: 'C√°c rules li√™n quan ƒë·∫øn kho·∫£ng c√°ch ch·∫°y',
      icon: 'üèÉ',
      color: '#3B82F6',
      order: 1,
      isActive: true
    },
    {
      id: 'group_pace',
      name: 'T·ªëc ƒë·ªô/Pace',
      nameEn: 'Pace',
      description: 'C√°c rules li√™n quan ƒë·∫øn t·ªëc ƒë·ªô',
      icon: '‚ö°',
      color: '#10B981',
      order: 2,
      isActive: true
    },
    {
      id: 'group_elevation',
      name: 'ƒê·ªô cao',
      nameEn: 'Elevation',
      description: 'C√°c rules li√™n quan ƒë·∫øn ƒë·ªô cao',
      icon: '‚õ∞Ô∏è',
      color: '#F59E0B',
      order: 3,
      isActive: true
    },
    {
      id: 'group_frequency',
      name: 'T·∫ßn su·∫•t',
      nameEn: 'Frequency',
      description: 'C√°c rules li√™n quan ƒë·∫øn t·∫ßn su·∫•t',
      icon: 'üìä',
      color: '#8B5CF6',
      order: 4,
      isActive: true
    },
    {
      id: 'group_special',
      name: 'ƒê·∫∑c bi·ªát',
      nameEn: 'Special',
      description: 'C√°c rules ƒë·∫∑c bi·ªát',
      icon: '‚≠ê',
      color: '#EC4899',
      order: 5,
      isActive: true
    }
  ];

  const rules = [
    {
      id: 'rule_min_distance_5km',
      name: 'T·ªëi thi·ªÉu 5km m·ªói l·∫ßn',
      nameEn: 'Minimum 5km per run',
      description: 'M·ªói ho·∫°t ƒë·ªông ph·∫£i c√≥ kho·∫£ng c√°ch t·ªëi thi·ªÉu 5km',
      groupId: 'group_distance',
      config: {
        type: 'distance',
        field: 'distance',
        operator: '>=',
        value: 5,
        unit: 'km'
      },
      display: {
        label: 'Kho·∫£ng c√°ch t·ªëi thi·ªÉu',
        placeholder: 'Nh·∫≠p kho·∫£ng c√°ch (km)',
        inputType: 'number',
        icon: 'üìè',
        allowCustomValue: true
      },
      defaults: {
        isRequired: true,
        points: 10,
        weight: 1.0
      },
      stats: {
        usageCount: 0,
        popularityScore: 0
      },
      isActive: true,
      isSystem: true
    },
    {
      id: 'rule_total_distance',
      name: 'T·ªïng kho·∫£ng c√°ch t·ªëi thi·ªÉu',
      nameEn: 'Minimum total distance',
      description: 'T·ªïng kho·∫£ng c√°ch trong s·ª± ki·ªán ph·∫£i ƒë·∫°t t·ªëi thi·ªÉu',
      groupId: 'group_distance',
      config: {
        type: 'total_distance',
        field: 'distance',
        operator: '>=',
        value: 100,
        unit: 'km',
        aggregate: 'sum'
      },
      display: {
        label: 'T·ªïng km t·ªëi thi·ªÉu',
        placeholder: 'Nh·∫≠p t·ªïng km',
        inputType: 'number',
        icon: 'üéØ',
        allowCustomValue: true
      },
      defaults: {
        isRequired: true,
        points: 50,
        weight: 2.0
      },
      stats: {
        usageCount: 0,
        popularityScore: 0
      },
      isActive: true,
      isSystem: true
    },
    {
      id: 'rule_max_pace',
      name: 'Pace kh√¥ng qu√° 7:00/km',
      nameEn: 'Max pace 7:00/km',
      description: 'Pace trung b√¨nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 7:00/km',
      groupId: 'group_pace',
      config: {
        type: 'pace',
        field: 'pace.average',
        operator: '<=',
        value: 420,
        unit: 's/km'
      },
      display: {
        label: 'Pace t·ªëi ƒëa',
        placeholder: 'VD: 420 (7:00/km)',
        inputType: 'number',
        icon: '‚ö°',
        allowCustomValue: true
      },
      defaults: {
        isRequired: false,
        points: 10,
        weight: 1.0
      },
      stats: {
        usageCount: 0,
        popularityScore: 0
      },
      isActive: true,
      isSystem: true
    },
    {
      id: 'rule_min_elevation',
      name: 'ƒê·ªô cao t·ªëi thi·ªÉu 100m',
      nameEn: 'Minimum elevation 100m',
      description: 'M·ªói ho·∫°t ƒë·ªông ph·∫£i c√≥ ƒë·ªô cao t·ªëi thi·ªÉu 100m',
      groupId: 'group_elevation',
      config: {
        type: 'elevation',
        field: 'elevation.total',
        operator: '>=',
        value: 100,
        unit: 'm'
      },
      display: {
        label: 'ƒê·ªô cao t·ªëi thi·ªÉu',
        placeholder: 'Nh·∫≠p ƒë·ªô cao (m)',
        inputType: 'number',
        icon: '‚õ∞Ô∏è',
        allowCustomValue: true
      },
      defaults: {
        isRequired: false,
        points: 15,
        weight: 1.5
      },
      stats: {
        usageCount: 0,
        popularityScore: 0
      },
      isActive: true,
      isSystem: true
    },
    {
      id: 'rule_min_activities',
      name: 'T·ªëi thi·ªÉu 10 l·∫ßn ch·∫°y',
      nameEn: 'Minimum 10 activities',
      description: 'Ph·∫£i ho√†n th√†nh t·ªëi thi·ªÉu 10 ho·∫°t ƒë·ªông',
      groupId: 'group_frequency',
      config: {
        type: 'activity_count',
        field: 'count',
        operator: '>=',
        value: 10,
        unit: 'l·∫ßn'
      },
      display: {
        label: 'S·ªë l·∫ßn ch·∫°y t·ªëi thi·ªÉu',
        placeholder: 'Nh·∫≠p s·ªë l·∫ßn',
        inputType: 'number',
        icon: 'üî¢',
        allowCustomValue: true
      },
      defaults: {
        isRequired: true,
        points: 20,
        weight: 1.0
      },
      stats: {
        usageCount: 0,
        popularityScore: 0
      },
      isActive: true,
      isSystem: true
    }
  ];

  const seedRuleGroups = async () => {
    try {
      const batch = writeBatch(db);
      
      ruleGroups.forEach((group) => {
        const docRef = doc(db, 'ruleGroups', group.id);
        batch.set(docRef, {
          ...group,
          createdAt: Timestamp.now(),
          updatedAt: Timestamp.now()
        });
      });
      
      await batch.commit();
      return { success: true, count: ruleGroups.length };
    } catch (error) {
      console.error('Error seeding rule groups:', error);
      return { success: false, error: error.message };
    }
  };

  const seedRules = async () => {
    try {
      const batch = writeBatch(db);
      
      rules.forEach((rule) => {
        const docRef = doc(db, 'rules', rule.id);
        batch.set(docRef, {
          ...rule,
          createdAt: Timestamp.now(),
          updatedAt: Timestamp.now()
        });
      });
      
      await batch.commit();
      return { success: true, count: rules.length };
    } catch (error) {
      console.error('Error seeding rules:', error);
      return { success: false, error: error.message };
    }
  };

  const handleSeedAll = async () => {
    setLoading(true);
    setResults(null);
    setStep(1);

    try {
      // Step 1: Rule Groups
      setStep(1);
      const groupsResult = await seedRuleGroups();
      
      if (!groupsResult.success) {
        setResults({ error: true, message: groupsResult.error });
        setLoading(false);
        return;
      }

      // Step 2: Rules
      setStep(2);
      const rulesResult = await seedRules();
      
      setResults({
        ruleGroups: groupsResult,
        rules: rulesResult
      });
    } catch (error) {
      setResults({ error: true, message: error.message });
    } finally {
      setLoading(false);
      setStep(1);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-2xl w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="bg-blue-600 w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg">
            <Database className="w-10 h-10 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Import D·ªØ Li·ªáu M·∫´u</h1>
          <p className="text-gray-600">T·∫°o Rule Groups v√† Rules v√†o Firebase</p>
        </div>

        {/* Warning */}
        <div className="bg-orange-50 border-l-4 border-orange-500 p-4 mb-6">
          <div className="flex items-start">
            <AlertCircle className="w-5 h-5 text-orange-600 mt-0.5 mr-3 flex-shrink-0" />
            <div>
              <p className="text-sm font-medium text-orange-900">L∆∞u √Ω quan tr·ªçng:</p>
              <ul className="text-sm text-orange-800 mt-2 space-y-1">
                <li>‚Ä¢ Ch·ªâ ch·∫°y script n√†y <strong>1 l·∫ßn duy nh·∫•t</strong></li>
                <li>‚Ä¢ Script s·∫Ω t·∫°o: 5 Rule Groups + 5 Rules m·∫´u</li>
                <li>‚Ä¢ N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu, script s·∫Ω ghi ƒë√® l√™n</li>
              </ul>
            </div>
          </div>
        </div>

        {/* What will be created */}
        <div className="bg-blue-50 rounded-lg p-4 mb-6">
          <h3 className="font-semibold text-blue-900 mb-3">üì¶ D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o:</h3>
          <div className="space-y-2 text-sm text-blue-800">
            <div>
              <strong>Rule Groups (5):</strong>
              <ul className="ml-4 mt-1 space-y-1">
                <li>üèÉ Kho·∫£ng c√°ch</li>
                <li>‚ö° T·ªëc ƒë·ªô/Pace</li>
                <li>‚õ∞Ô∏è ƒê·ªô cao</li>
                <li>üìä T·∫ßn su·∫•t</li>
                <li>‚≠ê ƒê·∫∑c bi·ªát</li>
              </ul>
            </div>
            <div className="mt-3">
              <strong>Rules (5):</strong>
              <ul className="ml-4 mt-1 space-y-1">
                <li>‚Ä¢ T·ªëi thi·ªÉu 5km m·ªói l·∫ßn</li>
                <li>‚Ä¢ T·ªïng kho·∫£ng c√°ch t·ªëi thi·ªÉu</li>
                <li>‚Ä¢ Pace kh√¥ng qu√° 7:00/km</li>
                <li>‚Ä¢ ƒê·ªô cao t·ªëi thi·ªÉu 100m</li>
                <li>‚Ä¢ T·ªëi thi·ªÉu 10 l·∫ßn ch·∫°y</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Import Button */}
        <button
          onClick={handleSeedAll}
          disabled={loading}
          className={`w-full py-4 rounded-lg font-semibold text-white transition-all mb-4 shadow-lg ${
            loading 
              ? 'bg-gray-400 cursor-not-allowed' 
              : 'bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600'
          }`}
        >
          {loading ? (
            <span className="flex items-center justify-center gap-2">
              <Loader className="w-5 h-5 animate-spin" />
              ƒêang import... (B∆∞·ªõc {step}/2)
            </span>
          ) : (
            'üöÄ Import D·ªØ Li·ªáu Ngay'
          )}
        </button>

        {/* Results */}
        {results && (
          <div className="space-y-3">
            <h3 className="font-semibold text-gray-900 mb-3">üìä K·∫øt qu·∫£:</h3>
            
            {results.error ? (
              <div className="bg-red-50 border-l-4 border-red-500 p-4 flex items-start gap-3">
                <XCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
                <div>
                  <p className="font-semibold text-red-900">C√≥ l·ªói x·∫£y ra</p>
                  <p className="text-sm text-red-700 mt-1">{results.message}</p>
                </div>
              </div>
            ) : (
              <>
                {results.ruleGroups && (
                  <div className={`border-l-4 rounded p-4 flex items-start gap-3 ${
                    results.ruleGroups.success 
                      ? 'bg-green-50 border-green-500' 
                      : 'bg-red-50 border-red-500'
                  }`}>
                    {results.ruleGroups.success ? (
                      <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
                    ) : (
                      <XCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
                    )}
                    <div>
                      <p className={`font-semibold ${
                        results.ruleGroups.success ? 'text-green-900' : 'text-red-900'
                      }`}>
                        Rule Groups
                      </p>
                      <p className={`text-sm mt-1 ${
                        results.ruleGroups.success ? 'text-green-700' : 'text-red-700'
                      }`}>
                        {results.ruleGroups.success 
                          ? `‚úì Import th√†nh c√¥ng ${results.ruleGroups.count} items`
                          : `‚úó ${results.ruleGroups.error}`
                        }
                      </p>
                    </div>
                  </div>
                )}

                {results.rules && (
                  <div className={`border-l-4 rounded p-4 flex items-start gap-3 ${
                    results.rules.success 
                      ? 'bg-green-50 border-green-500' 
                      : 'bg-red-50 border-red-500'
                  }`}>
                    {results.rules.success ? (
                      <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
                    ) : (
                      <XCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
                    )}
                    <div>
                      <p className={`font-semibold ${
                        results.rules.success ? 'text-green-900' : 'text-red-900'
                      }`}>
                        Rules
                      </p>
                      <p className={`text-sm mt-1 ${
                        results.rules.success ? 'text-green-700' : 'text-red-700'
                      }`}>
                        {results.rules.success 
                          ? `‚úì Import th√†nh c√¥ng ${results.rules.count} items`
                          : `‚úó ${results.rules.error}`
                        }
                      </p>
                    </div>
                  </div>
                )}

                {results.ruleGroups?.success && results.rules?.success && (
                  <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mt-4">
                    <p className="text-sm text-blue-800">
                      üéâ <strong>Ho√†n th√†nh!</strong> B·∫°n c√≥ th·ªÉ:
                      <br />
                      <span className="block mt-2">
                        1. ƒê√≥ng trang n√†y<br />
                        2. V√†o Admin Dashboard ‚Üí Tab "Qu·∫£n l√Ω Rules"<br />
                        3. Xem d·ªØ li·ªáu v·ª´a t·∫°o
                      </span>
                    </p>
                  </div>
                )}
              </>
            )}
          </div>
        )}

        {/* Instructions */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <h4 className="font-semibold text-gray-900 mb-3 text-sm">üí° H∆∞·ªõng d·∫´n:</h4>
          <ol className="text-xs text-gray-600 space-y-2 list-decimal list-inside">
            <li>ƒê·∫£m b·∫£o ƒë√£ setup Firebase config</li>
            <li>Click n√∫t "Import D·ªØ Li·ªáu Ngay"</li>
            <li>Ch·ªù 5-10 gi√¢y ƒë·ªÉ script ch·∫°y xong</li>
            <li>Ki·ªÉm tra Firestore Console ƒë·ªÉ x√°c nh·∫≠n</li>
            <li>V√†o <code className="bg-gray-100 px-2 py-0.5 rounded">/admin</code> ƒë·ªÉ xem d·ªØ li·ªáu</li>
          </ol>
        </div>
      </div>
    </div>
  );
};

export default SeedDataPage;